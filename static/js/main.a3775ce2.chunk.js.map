{"version":3,"sources":["components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","onClickCallback","id","value","Board","squareList","squares","squareComponents","forEach","row","square","push","key","generateSquareComponents","generateSquares","currentId","col","App","useState","setSquares","currentPlayer","setPlayer","winner","setWinner","allMatch","array","player","every","checkForWinnerHelper","squareValues","checkForWinner","flat","map","clickedSquare","newSquares","newRow","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a3775ce2.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Square.css'\n\nconst Square = (props) => {\n\n  const onSquareClick = () => {    \n    props.onClickCallback(props.id);\n  };\n  \n  return <button\n    className=\"square\" onClick={onSquareClick}\n  >\n    {props.value}\n  </button>\n}\n\nSquare.propTypes = {\n  value: PropTypes.string.isRequired,\n  onClickCallback: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n};\n\nexport default Square\n","import React from 'react';\nimport './Board.css';\nimport Square from './Square';\nimport PropTypes from 'prop-types';\n\nconst generateSquareComponents = (squares, onClickCallback) => {\n  const squareComponents = [];\n  \n  squares.forEach(row => {\n    row.forEach(square => {      \n      squareComponents.push(\n        <Square \n          key={square.id} \n          id={square.id} \n          value={square.value} \n          onClickCallback={onClickCallback}\n        />\n      )\n    });\n  });\n    \n  return squareComponents;\n}\n\nconst Board = ({ squares, onClickCallback }) => {  \n  const squareList = generateSquareComponents(squares, onClickCallback);\n  return <div className=\"grid\" >\n    {squareList}\n  </div>\n}\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        value: PropTypes.string.isRequired\n      })\n    )\n  ),\n  onClickCallback: PropTypes.func.isRequired,\n};\n\nexport default Board;\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport Board from './components/Board';\n\nconst PLAYER_1 = 'X';\nconst PLAYER_2 = 'O';\n\nconst generateSquares = () => {\n  const squares = [];\n\n  let currentId = 0;\n\n  for (let row = 0; row < 3; row += 1) {\n    squares.push([]);\n    for (let col = 0; col < 3; col += 1) {\n      squares[row].push({\n        id: currentId,\n        value: '',\n      });\n      currentId += 1;\n    }\n  }\n\n  return squares;\n}\n\nconst App = () => {\n  const [squares, setSquares] = useState(generateSquares());\n  const [currentPlayer, setPlayer] = useState(PLAYER_1);  \n  const [winner, setWinner] = useState('');\n\n  // determine current player\n  const togglePlayer = () => {\n    (currentPlayer === PLAYER_1) ? setPlayer(PLAYER_2) : setPlayer(PLAYER_1);\n  }\n\n  const onClickCallback = (clickedSquare) => {\n    const newSquares = [];\n\n    // if there is a winner, do not update board\n    if (winner !== '') {\n      return;\n    } else {\n      squares.forEach((row) => {    \n        const newRow = [];\n        row.forEach(square => {\n          // only change square if it's empty\n          if (square.value === '') {\n            // check if current square matches clicked square\n            if (square.id === clickedSquare) {\n              togglePlayer();\n              square.value = currentPlayer;\n            } \n          }\n          newRow.push(square);\n        });\n        newSquares.push(newRow);\n      })\n\n      checkForWinner();\n      setSquares(newSquares);  \n    }\n  }\n\n  // helper method for checkForWinnerHelper to check if all values in array are the same\n  const allMatch = (array, player) => {\n    // returns boolean value\n    return array.every(value => value === player);\n  }\n  \n  // helper method for checkForWinner\n  // checks if there are three of the same value in a 'row' (row/col/diagonal)\n  const checkForWinnerHelper = (squareValues, player) => {\n    return (\n      allMatch([squareValues[0], squareValues[1], squareValues[2]], player) || \n      allMatch([squareValues[3], squareValues[4], squareValues[5]], player) || \n      allMatch([squareValues[6], squareValues[7], squareValues[8]], player) || \n      allMatch([squareValues[0], squareValues[3], squareValues[6]], player) || \n      allMatch([squareValues[1], squareValues[4], squareValues[7]], player) || \n      allMatch([squareValues[2], squareValues[5], squareValues[8]], player) || \n      allMatch([squareValues[0], squareValues[4], squareValues[8]], player) || \n      allMatch([squareValues[2], squareValues[4], squareValues[6]], player)\n    )\n  }\n\n  \n  const checkForWinner = () => {\n    // turn rows into an array of squares\n    const flattenSquares = squares.flat();\n    // save values from each square into an array\n    const squareValues = flattenSquares.map(square => square.value);\n            \n    if (checkForWinnerHelper(squareValues, PLAYER_1)) {\n      setWinner(PLAYER_1);\n    } else if (checkForWinnerHelper(squareValues, PLAYER_2)) {\n      setWinner(PLAYER_2);\n    // check if every square is filled\n    } else if (squareValues.every(value => value !== '')) {\n      setWinner('no one!');\n    }\n  }\n\n  const resetGame = () => {\n    setPlayer(PLAYER_1);\n    setWinner('');\n    setSquares(generateSquares);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>React Tic Tac Toe</h1>\n        <h2>The winner is ... {winner} </h2>\n        <button onClick={resetGame}>Reset Game</button>\n      </header>\n      <main>\n        <Board squares={squares} onClickCallback={onClickCallback}/>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}